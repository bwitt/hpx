Parameters:
    Environment:
        Type: String
        AllowedPattern: "^[a-zA-Z0-9]+$"
    Prefix:
        Type: String
        Default: "hpx"
    DistS3Bucket:
        Type: String
        Default: "hpx-code"
    RedshiftUser:
        Type: String
        Default: "turbo"
    RedshiftPassword:
        Type: String
        NoEcho: true

Resources:
    CustomResourcesStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub
                - "https://s3-${AWS::Region}.${AWS::URLSuffix}/${codebucket}/${env}/cloudformation/custom-resources.yaml"
                - { env: !Ref Environment, codebucket: !Ref DistS3Bucket }

    CopyS3Object:
        Type: Custom::CopyS3Object
        Properties:
            ServiceToken: !GetAtt CustomResourcesStack.Outputs.CopyS3Object
            SourceBucket: !Ref DistS3Bucket
            SourceKey: !Sub
                - "${env}/s3/pixelserver/1x1.gif"
                - { env: !Ref Environment }
            DestinationBucket: !Ref PixelServerS3Bucket
            DestinationKey: "1x1.gif"

    PixelServerCloudFrontOriginAccessId:
        Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
        Properties:
              CloudFrontOriginAccessIdentityConfig:
                  Comment: !Sub
                      - "${prefix}-${env}-srv"
                      - { env: !Ref Environment, prefix: !Ref Prefix }

    PixelServerS3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub
                - "${prefix}-${env}-srv-${AWS::Region}-${AWS::AccountId}"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            AccessControl: PublicRead
            WebsiteConfiguration:
                IndexDocument: "1x1.gif"

    PixelServerS3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref PixelServerS3Bucket
            PolicyDocument:
                Statement:
                    -
                        Sid: PixelServerCloudFrontReadAccess
                        Action: "s3:GetObject"
                        Effect: "Allow"
                        Resource: !Join ['', [!GetAtt PixelServerS3Bucket.Arn, "/*"]]
                        Principal:
                            CanonicalUser: !GetAtt PixelServerCloudFrontOriginAccessId.S3CanonicalUserId
                    -
                        Sid: PixelServerPublicReadAccess
                        Action: s3:GetObject
                        Effect: Allow
                        Resource: !Join ['', [!GetAtt PixelServerS3Bucket.Arn, "/*"]]
                        Principal: '*'


    PixelLogS3Bucket:
        DependsOn: PixelLogLambda
        DependsOn: PixlLogLamdaPermission
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub
                - "${prefix}-${env}-log-${AWS::Region}-${AWS::AccountId}"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            AccessControl: "Private"
            NotificationConfiguration:
                LambdaConfigurations:
                    -
                        Event: "s3:ObjectCreated:Put"
                        Function: !GetAtt PixelLogLambda.Arn

    PixelServerCloudfrontDistribution:
        Type: "AWS::CloudFront::Distribution"
        Properties:
            DistributionConfig:
                Enabled: "true"
                DefaultRootObject: "1x1.gif"
                PriceClass: "PriceClass_All"
                DefaultCacheBehavior:
                    TargetOriginId: !Ref PixelServerS3Bucket
                    ViewerProtocolPolicy: "redirect-to-https"
                    MinTTL: 0
                    AllowedMethods:
                        - "HEAD"
                        - "GET"
                    CachedMethods:
                        - "HEAD"
                        - "GET"
                    ForwardedValues:
                        QueryString: "false"
                    Compress: "true"

                Logging:
                    Bucket: !GetAtt PixelLogS3Bucket.DomainName
                Origins:
                    -
                        DomainName: !GetAtt PixelServerS3Bucket.DomainName
                        Id: !Ref PixelServerS3Bucket
                        S3OriginConfig:
                            OriginAccessIdentity: !Sub
                                - "origin-access-identity/cloudfront/${OriginAccessIdentity}"
                                - { OriginAccessIdentity: !Ref PixelServerCloudFrontOriginAccessId }

    PixelLogLambdaRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub
                - "${prefix}-${env}-pixellog-lambda-role"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            AssumeRolePolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                      -
                          Effect: "Allow"
                          Principal:
                              Service:
                                  - !Sub ["lambda.${AWS::URLSuffix}", {}]
                                  - !Sub ["edgelambda.${AWS::URLSuffix}", {}]
                          Action:
                              - "sts:AssumeRole"
            Policies:
              -
                PolicyName: !Sub
                    - "${prefix}-${env}-pixellog-lambda-policy"
                    - { env: !Ref Environment, prefix: !Ref Prefix }
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        -
                            Sid: PixelLogLambdaExecutionContext
                            Effect: "Allow"
                            Action:
                                - "s3:PutObject"
                                - "s3:GetObject"
                                - "cloudfront:*"
                                - "iam:CreateServiceLinkedRole"
                                - "xray:PutTelemetryRecords"
                                - "firehose:PutRecord"
                                - "logs:*"
                                - "lambda:*"
                                - "firehose:PutRecordBatch"
                                - "firehose:ListDeliveryStreams"
                                - "xray:PutTraceSegments"
                            Resource: "*"

    PixelLogLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !Ref DistS3Bucket
                S3Key: !Sub
                    - "${env}/lambda/hpx-cloudfront-logs-production.zip"
                    - { env: !Ref Environment }
            Handler: "index.handler"
            Role: !GetAtt PixelLogLambdaRole.Arn
            Runtime: "nodejs8.10"
            Environment:
                Variables:
                  KINESIS_DELIVERY_STREAM: "TBD"

    PixelLogLambdaAlias:
        Type: "AWS::Lambda::Alias"
        Properties:
            Name: "PixelLogLambdaAlias"
            FunctionName: !Ref PixelLogLambda
            FunctionVersion: "$LATEST"

    PixlLogLamdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            FunctionName: !GetAtt PixelLogLambda.Arn
            Action: "lambda:InvokeFunction"
            Principal: !Sub ["s3.${AWS::URLSuffix}", {}]
            SourceAccount: !Ref "AWS::AccountId"

    HPXRedshiftCluster:
      Type: "AWS::Redshift::Cluster"
      Properties:
        DBName: !Sub
          - "${prefix}_${env}"
          - { env: !Ref Environment, prefix: !Ref Prefix }
        MasterUsername: !Ref RedshiftUser
        MasterUserPassword: !Ref RedshiftPassword
        NodeType: "dc2.large"
        ClusterIdentifier: !Sub
          - "${prefix}-${env}"
          - { env: !Ref Environment, prefix: !Ref Prefix }
        ClusterType: "single-node"
        IamRoles:
          - "arn:aws:iam::712168529562:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift"
        VpcSecurityGroupIds:
          - "sg-b17d3ace"

    PixelLogKinesisFirehose:
      Type: "AWS::KinesisFirehose::DeliveryStream"
      Properties:
        DeliveryStreamName: !Sub
          - "${prefix}-${env}-pixellog-delivery-stream"
          - { env: !Ref Environment, prefix: !Ref Prefix }
        RedshiftDestinationConfiguration:
          ClusterJDBCURL: !Sub
            - "jdbc:redshift://${endpoint}:${port}/${prefix}_${env}"
            - { endpoint: !GetAtt HPXRedshiftCluster.Endpoint.Address, port: !GetAtt HPXRedshiftCluster.Endpoint.Port, env: !Ref Environment, prefix: !Ref Prefix }
          CopyCommand:
            CopyOptions: "DELIMITER '\t' TIMEFORMAT 'auto'"
            DataTableColumns: "request_time, ip, useragent, url, a, b, c, d, referrer, cookie"
            DataTableName: "pixels"
          Username: !Ref RedshiftUser
          Password: !Ref RedshiftPassword
          RoleARN: "arn:aws:iam::712168529562:role/hpx_firehose_delivery_role"
          S3Configuration:
            BucketARN: !GetAtt KinesisFirehoseIntermediateS3Bucket.Arn
            BufferingHints:
              IntervalInSeconds: 300
              SizeInMBs: 1
            CompressionFormat: "UNCOMPRESSED"
            RoleARN: "arn:aws:iam::712168529562:role/hpx_firehose_delivery_role"

    KinesisFirehoseIntermediateS3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
          BucketName: !Sub
            - "${prefix}-${env}-kinesis-intermediate-${AWS::Region}-${AWS::AccountId}"
            - { env: !Ref Environment, prefix: !Ref Prefix }
          AccessControl: "Private"


