Parameters:
    Environment:
        Type: String
        AllowedPattern: "^[a-zA-Z0-9]+$"
    Prefix:
        Type: String
        Default: "hpx"
    DistS3Bucket:
        Type: String
        Default: "hpx-code"
    RedshiftUser:
        Type: String
        Default: "turbo"
    RedshiftPassword:
        Type: String
        NoEcho: true
    RedshiftCidrBlock:
        Type: String
        AllowedPattern: "^(10\.|172\.(1[6-9]|2\d|3[01])\.|192\.168\.).*$" # can be tightened up later...

Mappings:
  RegionMap:
    ap-northeast-1:   #Tokyo
      Kinesis: "13.113.196.224/27"
      Quicksight: "13.113.244.32/27"
    ap-northeast-2:   #Seoul
      Kinesis: ""
      Quicksight: ""
    ap-northeast-3:   #Osaka-Local
      Kinesis: ""
      Quicksight: ""
    ap-south-1:       #Mumbai
      Kinesis: ""
      Quicksight: ""
    ap-southeast-1:   #Singapore
      Kinesis: "13.228.64.192/27"
      Quicksight: "13.229.254.0/27"
    ap-southeast-2:   #Sydney
      Kinesis: "13.210.67.224/27"
      Quicksight: "54.153.249.96/27"
    ca-central-1:     #Central
      Kinesis: ""
      Quicksight: ""
    cn-north-1:       #Beijing
      Kinesis: ""
      Quicksight: ""
    cn-northwest-1:   #Ningxia
      Kinesis: ""
      Quicksight: ""
    eu-central-1:     #Frankfurt
      Kinesis: "35.158.127.160/27"
      Quicksight: ""
    eu-west-1:        #Ireland
      Kinesis: "52.19.239.192/27"
      Quicksight: "52.210.255.224/27"
    eu-west-2:        #London
      Kinesis: ""
      Quicksight: ""
    eu-west-3:        #Paris
      Kinesis: ""
      Quicksight: ""
    sa-east-1:        #SÃ£o Paulo
      Kinesis: ""
      Quicksight: ""
    us-east-1:        #N. Virginia
      Kinesis: "52.70.63.192/27"
      Quicksight: "52.23.63.224/27"
    us-east-2:        #Ohio
      Kinesis: "13.58.135.96/27"
      Quicksight: "52.15.247.160/27"
    us-west-1:        #N. California
      Kinesis: "13.57.135.192/27"
      Quicksight: ""
    us-west-2:        #Oregon
      Kinesis: "52.89.255.224/27"
      Quicksight: "54.70.204.128/27"

Resources:
    CustomResourcesRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            Policies:
                -
                    PolicyName: CopyS3ObjectPolicy
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            -
                                Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                Resource: arn:aws:logs:*:*:*
                            -
                                Sid: "AccessSourceAndDestinationBuckets"
                                Effect: Allow
                                Action:
                                    - s3:ListBucket
                                    - s3:ListBucketVersions
                                    - s3:GetObject
                                    - s3:GetObjectVersion
                                    - s3:PutObject
                                Resource: arn:aws:s3:::*
                            -
                                Sid: "AccessVPCs"
                                Effect: Allow
                                Action:
                                    - ec2:CreateNetworkInterface
                                    - ec2:DeleteNetworkInterface
                                    - ec2:DescribeNetworkInterfaces
                                    - lambda:InvokeFunction
                                Resource: "*"

    CopyS3ObjectLambda:
      Type: AWS::Lambda::Function
      Properties:
            Handler: index.handler
            Role: !GetAtt CustomResourcesRole.Arn
            Runtime: nodejs6.10
            Code:
                S3Bucket: !Ref DistS3Bucket
                S3Key: !Sub
                    - "${env}/lambda/s3copy.zip"
                    - { env: !Ref Environment }

    CopyPixelToPixelServer:
        Type: Custom::CopyS3Object
        Properties:
            ServiceToken: !GetAtt CopyS3ObjectLambda.Arn
            SourceBucket: !Ref DistS3Bucket
            SourceKey: !Sub
                - "${env}/s3/pixelserver/1x1.gif"
                - { env: !Ref Environment }
            DestinationBucket: !Ref PixelServerS3Bucket
            DestinationKey: "1x1.gif"

    PGQueryLambda:
        Type: AWS::Lambda::Function
        Properties:
            Handler: index.handler
            Role: !GetAtt CustomResourcesRole.Arn
            Runtime: nodejs6.10
            Timeout: 30
            Code:
                S3Bucket: !Ref DistS3Bucket
                S3Key: !Sub
                    - "${env}/lambda/pgquery.zip"
                    - { env: !Ref Environment }
            VpcConfig:
                SecurityGroupIds:
                    - !GetAtt HPXRedshiftClusterVpcSecurityGroup.GroupId
                    - !GetAtt HPXRedshiftClusterVpc.DefaultSecurityGroup
                    #- sg-b17d3ace
                SubnetIds:
                    - !Ref HPXRedshiftClusterVpcSubnet
                    #- subnet-0c3ef675
                    #- subnet-24bc566f
                    #- subnet-f0e151aa

    CreatePixelsTable:
        DependsOn:
          - HPXRedshiftCluster
          - HPXRedshiftClusterVpcEndpoint
        Type: Custom::PGQuery
        Properties:
            ServiceToken: !GetAtt PGQueryLambda.Arn
            Query: "create table if not exists pixels(id bigint identity, request_time timestamp, ip varchar(50), useragent varchar(MAX), url varchar(MAX), a varchar(MAX), b varchar(MAX), c varchar(MAX), d varchar(MAX), referrer varchar(max), cookie varchar(max));"
            User: !Ref RedshiftUser
            Host: !GetAtt HPXRedshiftCluster.Endpoint.Address
            Database: !Sub
                - "${prefix}_${env}"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            Password: !Ref RedshiftPassword
            Port: !GetAtt HPXRedshiftCluster.Endpoint.Port

    PixelServerCloudFrontOriginAccessId:
        Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
        Properties:
              CloudFrontOriginAccessIdentityConfig:
                  Comment: !Sub
                      - "${prefix}-${env}-srv"
                      - { env: !Ref Environment, prefix: !Ref Prefix }

    PixelServerS3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub
                - "${prefix}-${env}-srv-${AWS::Region}-${AWS::AccountId}"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            AccessControl: PublicRead
            WebsiteConfiguration:
                IndexDocument: "1x1.gif"

    PixelServerS3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref PixelServerS3Bucket
            PolicyDocument:
                Statement:
                    -
                        Sid: PixelServerCloudFrontReadAccess
                        Action: "s3:GetObject"
                        Effect: "Allow"
                        Resource: !Join ['', [!GetAtt PixelServerS3Bucket.Arn, "/*"]]
                        Principal:
                            CanonicalUser: !GetAtt PixelServerCloudFrontOriginAccessId.S3CanonicalUserId
                    -
                        Sid: PixelServerPublicReadAccess
                        Action: s3:GetObject
                        Effect: Allow
                        Resource: !Join ['', [!GetAtt PixelServerS3Bucket.Arn, "/*"]]
                        Principal: '*'


    PixelLogS3Bucket:
        DependsOn: PixlLogLamdaPermission
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub
                - "${prefix}-${env}-log-${AWS::Region}-${AWS::AccountId}"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            AccessControl: "Private"
            NotificationConfiguration:
                LambdaConfigurations:
                    -
                        Event: "s3:ObjectCreated:Put"
                        Function: !GetAtt PixelLogLambda.Arn

    PixelServerCloudfrontDistribution:
        Type: "AWS::CloudFront::Distribution"
        Properties:
            DistributionConfig:
                Enabled: "true"
                DefaultRootObject: "1x1.gif"
                PriceClass: "PriceClass_All"
                DefaultCacheBehavior:
                    TargetOriginId: !Ref PixelServerS3Bucket
                    ViewerProtocolPolicy: "redirect-to-https"
                    MinTTL: 0
                    AllowedMethods:
                        - "HEAD"
                        - "GET"
                    CachedMethods:
                        - "HEAD"
                        - "GET"
                    ForwardedValues:
                        QueryString: "false"
                    Compress: "true"

                Logging:
                    Bucket: !GetAtt PixelLogS3Bucket.DomainName
                Origins:
                    -
                        DomainName: !GetAtt PixelServerS3Bucket.DomainName
                        Id: !Ref PixelServerS3Bucket
                        S3OriginConfig:
                            OriginAccessIdentity: !Sub
                                - "origin-access-identity/cloudfront/${OriginAccessIdentity}"
                                - { OriginAccessIdentity: !Ref PixelServerCloudFrontOriginAccessId }

    PixelLogLambdaRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub
                - "${prefix}-${env}-pixellog-lambda-role"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            AssumeRolePolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                      -
                          Effect: "Allow"
                          Principal:
                              Service:
                                  - !Sub ["lambda.${AWS::URLSuffix}", {}]
                                  - !Sub ["edgelambda.${AWS::URLSuffix}", {}]
                          Action:
                              - "sts:AssumeRole"
            Policies:
              -
                PolicyName: !Sub
                    - "${prefix}-${env}-pixellog-lambda-policy"
                    - { env: !Ref Environment, prefix: !Ref Prefix }
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        -
                            Sid: PixelLogLambdaExecutionContext
                            Effect: "Allow"
                            Action:
                                - "s3:PutObject"
                                - "s3:GetObject"
                                - "cloudfront:*"
                                - "iam:CreateServiceLinkedRole"
                                - "xray:PutTelemetryRecords"
                                - "firehose:PutRecord"
                                - "logs:*"
                                - "lambda:*"
                                - "firehose:PutRecordBatch"
                                - "firehose:ListDeliveryStreams"
                                - "xray:PutTraceSegments"
                            Resource: "*"

    KinesisFirehoseDeliveryRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub
                - "${prefix}-${env}-firehose-delivery-role"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - "firehose.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            Policies:
              -
                PolicyName: !Sub
                    - "${prefix}-${env}-firehose-delivery-policy"
                    - { env: !Ref Environment, prefix: !Ref Prefix }
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        -
                            Effect: "Allow"
                            Action:
                                - "s3:AbortMultipartUpload"
                                - "s3:GetBucketLocation"
                                - "s3:GetObject"
                                - "s3:ListBucket"
                                - "s3:ListBucketMultipartUploads"
                                - "s3:PutObject"
                                - "lambda:InvokeFunction"
                                - "lambda:GetFunctionConfiguration"
                                - "logs:PutLogEvents"
                                - "kinesis:DescribeStream"
                                - "kinesis:GetShardIterator"
                                - "kinesis:GetRecords"
                            Resource: "*"
                        -
                            Effect: "Allow"
                            Action:
                                - "kms:Decrypt"
                            Resource: "*"
                            Condition:
                                StringEquals:
                                    kms:ViaService: !Sub ["kinesis.${AWS::Region}.${AWS::URLSuffix}", {}]
                                StringLike:
                                    kms:EncryptionContext:aws:kinesis:arn: !Sub
                                      - "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${prefix}-${env}-pixellog-delivery-stream"
                                      - { env: !Ref Environment, prefix: !Ref Prefix }

    RedshiftAWSServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub
                - "${prefix}-${env}-redshift-aws-service-role"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - "redshift.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            Policies:
              -
                PolicyName: !Sub
                    - "${prefix}-${env}-redshift-aws-service-policy"
                    - { env: !Ref Environment, prefix: !Ref Prefix }
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        -
                            Effect: "Allow"
                            Action:
                                - "ec2:DescribeVpcs"
                                - "ec2:DescribeSubnets"
                                - "ec2:DescribeNetworkInterfaces"
                                - "ec2:DescribeAddresses"
                                - "ec2:AssociateAddress"
                                - "ec2:DisassociateAddress"
                                - "ec2:CreateNetworkInterface"
                                - "ec2:DeleteNetworkInterface"
                                - "ec2:ModifyNetworkInterfaceAttribute"
                            Resource: "*"

    PixelLogLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !Ref DistS3Bucket
                S3Key: !Sub
                    - "${env}/lambda/hpx-cloudfront-logs-production.zip"
                    - { env: !Ref Environment }
            Handler: "index.handler"
            Role: !GetAtt PixelLogLambdaRole.Arn
            Runtime: "nodejs8.10"
            Environment:
                Variables:
                  KINESIS_DELIVERY_STREAM: !Ref PixelLogKinesisFirehose

    PixelLogLambdaAlias:
        Type: "AWS::Lambda::Alias"
        Properties:
            Name: "PixelLogLambdaAlias"
            FunctionName: !Ref PixelLogLambda
            FunctionVersion: "$LATEST"

    PixlLogLamdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            FunctionName: !GetAtt PixelLogLambda.Arn
            Action: "lambda:InvokeFunction"
            Principal: !Sub ["s3.${AWS::URLSuffix}", {}]
            SourceAccount: !Ref "AWS::AccountId"

    HPXRedshiftClusterVpc:
      Type: "AWS::EC2::VPC"
      Properties:
        CidrBlock: !Ref RedshiftCidrBlock
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          -
            Key: "Name"
            Value: !Sub
              - "${prefix}-${env}-vpc"
              - { env: !Ref Environment, prefix: !Ref Prefix }

    HPXRedshiftClusterVpcInternetGateway:
      Type: "AWS::EC2::InternetGateway"

    HPXRedshiftClusterVpcInternetGatewayAttachment:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        InternetGatewayId: !Ref HPXRedshiftClusterVpcInternetGateway
        VpcId: !Ref HPXRedshiftClusterVpc

    HPXRedshiftClusterVpcRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: !Ref HPXRedshiftClusterVpc

    HPXRedshiftClusterVpcRoute:
      DependsOn: HPXRedshiftClusterVpcInternetGatewayAttachment
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref HPXRedshiftClusterVpcRouteTable
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: !Ref HPXRedshiftClusterVpcInternetGateway

    HPXRedshiftClusterVpcSubnet:
      Type: "AWS::EC2::Subnet"
      Properties:
        CidrBlock: !Ref RedshiftCidrBlock
        VpcId: !Ref HPXRedshiftClusterVpc

    HPXRedshiftClusterVpcSubnetGroup:
      Type: "AWS::Redshift::ClusterSubnetGroup"
      Properties:
        Description: "Subnet group for hacker pixel redshift cluster"
        SubnetIds:
          - !Ref HPXRedshiftClusterVpcSubnet

    HPXRedshiftClusterVpcSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupName: !Sub
          - "${prefix}-${env}-security-group"
          - { env: !Ref Environment, prefix: !Ref Prefix }
        GroupDescription: "Group to configure inbound rules for HPX Redshift Cluster"
        VpcId: !Ref HPXRedshiftClusterVpc
        SecurityGroupIngress:
          -
            CidrIp: { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Kinesis" ]}
            Description: "Kinesis"
            FromPort: 5439
            ToPort: 5439
            IpProtocol: "TCP"
          -
            CidrIp: { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Quicksight" ]}
            Description: "Quicksight"
            FromPort: 5439
            ToPort: 5439
            IpProtocol: "TCP"
          -
            CidrIp: "216.174.112.44/32"
            Description: "Redshift from Techspace"
            FromPort: 5439
            ToPort: 5439
            IpProtocol: "TCP"
          -
            CidrIp: "198.27.243.221/32"
            Description: "Redshift from Giao"
            FromPort: 5439
            ToPort: 5439
            IpProtocol: "TCP"
          -
            CidrIp: "73.71.90.13/32"
            Description: "Redshift from Adolfo"
            FromPort: 5439
            ToPort: 5439
            IpProtocol: "TCP"
          -
            CidrIp: "24.5.134.249/32"
            Description: "Redshift from Dan"
            FromPort: 5439
            ToPort: 5439
            IpProtocol: "TCP"

    HPXRedshiftClusterVpcSubnetRouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        RouteTableId: !Ref HPXRedshiftClusterVpcRouteTable
        SubnetId: !Ref HPXRedshiftClusterVpcSubnet

    HPXRedshiftClusterVpcEndpoint:
      Type: "AWS::EC2::VPCEndpoint"
      Properties:
        VpcId: !Ref HPXRedshiftClusterVpc
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
        VpcEndpointType: "Gateway"
        RouteTableIds:
          - !Ref HPXRedshiftClusterVpcRouteTable

    HPXRedshiftCluster:
      DependsOn:
        - HPXRedshiftClusterVpcInternetGatewayAttachment
        - HPXRedshiftClusterVpcSubnetRouteTableAssociation
      Type: "AWS::Redshift::Cluster"
      Properties:
        DBName: !Sub
          - "${prefix}_${env}"
          - { env: !Ref Environment, prefix: !Ref Prefix }
        MasterUsername: !Ref RedshiftUser
        MasterUserPassword: !Ref RedshiftPassword
        NodeType: "dc2.large"
        ClusterIdentifier: !Sub
          - "${prefix}-${env}-2"
          - { env: !Ref Environment, prefix: !Ref Prefix }
        ClusterType: "single-node"
        IamRoles:
          - !GetAtt RedshiftAWSServiceRole.Arn
        ClusterSubnetGroupName: !Ref HPXRedshiftClusterVpcSubnetGroup
        VpcSecurityGroupIds:
          - !GetAtt HPXRedshiftClusterVpcSecurityGroup.GroupId
          - !GetAtt HPXRedshiftClusterVpc.DefaultSecurityGroup

    KinesisCloudWatchLogGroup:
      Type: "AWS::Logs::LogGroup"
      Properties:
        LogGroupName: !Sub
          - "/aws/kinesisfirehose/${prefix}-${env}-pixellog-delivery-stream"
          - { env: !Ref Environment, prefix: !Ref Prefix }

    KinesisCloudWatchS3DeliveryLogStream:
      Type: "AWS::Logs::LogStream"
      Properties:
        LogGroupName: !Ref KinesisCloudWatchLogGroup
        LogStreamName: "S3Delivery"

    KinesisCloudWatchRedshiftDeliveryLogStream:
      Type: "AWS::Logs::LogStream"
      Properties:
        LogGroupName: !Ref KinesisCloudWatchLogGroup
        LogStreamName: "RedshiftDelivery"

    PixelLogKinesisFirehose:
      Type: "AWS::KinesisFirehose::DeliveryStream"
      Properties:
        DeliveryStreamName: !Sub
          - "${prefix}-${env}-pixellog-delivery-stream"
          - { env: !Ref Environment, prefix: !Ref Prefix }
        RedshiftDestinationConfiguration:
          ClusterJDBCURL: !Sub
            - "jdbc:redshift://${endpoint}:${port}/${prefix}_${env}"
            - { endpoint: !GetAtt HPXRedshiftCluster.Endpoint.Address, port: !GetAtt HPXRedshiftCluster.Endpoint.Port, env: !Ref Environment, prefix: !Ref Prefix }
          CopyCommand:
            CopyOptions: "DELIMITER '\\t' TIMEFORMAT 'auto'"
            DataTableColumns: "request_time, ip, useragent, url, a, b, c, d, referrer, cookie"
            DataTableName: "pixels"
          Username: !Ref RedshiftUser
          Password: !Ref RedshiftPassword
          RoleARN: !GetAtt KinesisFirehoseDeliveryRole.Arn
          CloudWatchLoggingOptions:
            Enabled: true
            LogGroupName: !Ref KinesisCloudWatchLogGroup
            LogStreamName: "RedshiftDelivery"
          S3Configuration:
            BucketARN: !GetAtt KinesisFirehoseIntermediateS3Bucket.Arn
            BufferingHints:
              IntervalInSeconds: 300
              SizeInMBs: 1
            CompressionFormat: "UNCOMPRESSED"
            RoleARN: !GetAtt KinesisFirehoseDeliveryRole.Arn
            CloudWatchLoggingOptions:
              Enabled: true
              LogGroupName: !Ref KinesisCloudWatchLogGroup
              LogStreamName: "S3Delivery"

    KinesisFirehoseIntermediateS3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
          BucketName: !Sub
            - "${prefix}-${env}-kinesis-intermediate-${AWS::Region}-${AWS::AccountId}"
            - { env: !Ref Environment, prefix: !Ref Prefix }
          AccessControl: "Private"
