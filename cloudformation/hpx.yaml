Parameters:
    Environment:
        Type: String
        Default: "dev"
    Prefix:
        Type: String
        Default: "hpx"
    DistS3Bucket:
        Type: String
        Default: "hpx-code.s3.amazonaws.com"
    RedShiftUser:
        Type: String
        Default: "turbo"
    RedShiftPassword:
        Type: String
        NoEcho: true

Resources:
    PixelServerCloudFrontOriginAccessId:
        Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
        Properties:
              CloudFrontOriginAccessIdentityConfig:
                  Comment: !Sub
                      - "${prefix}-${env}-srv"
                      - { env: !Ref Environment, prefix: !Ref Prefix }

    PixelServerS3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub
                - "${prefix}-${env}-srv-${AWS::Region}-${AWS::AccountId}"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            AccessControl: "Private"

    PixelServerS3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref PixelServerS3Bucket
            PolicyDocument:
                Statement:
                    -
                        Action:
                            - "s3:GetObject"
                        Effect: "Allow"
                        Resource: !Join ['', [!GetAtt PixelServerS3Bucket.Arn, "/*"]]
                        Principal:
                            CanonicalUser: !GetAtt PixelServerCloudFrontOriginAccessId.S3CanonicalUserId

    PixelLog3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub
                - "${prefix}-${env}-log-${AWS::Region}-${AWS::AccountId}"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            AccessControl: "Private"
            NotificationConfiguration:
                LambdaConfigurations:
                    Event: "s3:ObjectCreated:Put"
                    Function: !Ref PixelLogLambdaAlias

    PixelServerCloudfrontDistribution:
        Type: "AWS::CloudFront::Distribution"
        Properties:
            DistributionConfig:
                Enabled: "true"
                DefaultRootObject: index.html
                PriceClass: "PriceClass_All"
                DefaultCacheBehavior:
                    TargetOriginId: !Ref PixelServerS3Bucket
                    ViewerProtocolPolicy: "redirect-to-https"
                    MinTTL: 0
                    AllowedMethods:
                        - "HEAD"
                        - "GET"
                    CachedMethods:
                        - "HEAD"
                        - "GET"
                    ForwardedValues:
                        QueryString: "false"
                    Compress: "true"

                Logging:
                    Bucket: !GetAtt PixelLog3Bucket.DomainName
                Origins:
                    -
                        DomainName: !GetAtt PixelServerS3Bucket.DomainName
                        Id: !Ref PixelServerS3Bucket
                        S3OriginConfig:
                            OriginAccessIdentity: !Sub
                                - "origin-access-identity/cloudfront/${OriginAccessIdentity}"
                                - { OriginAccessIdentity: !Ref PixelServerCloudFrontOriginAccessId }

    PixelLogLambdaRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: !Sub
            - "${prefix}-${env}-pixellog-lambda-role"
            - { env: !Ref Environment, prefix: !Ref Prefix }
        AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                  -
                      Effect: "Allow"
                      Principal:
                          Service:
                              - !Sub ["lambda.${AWS::URLSuffix}", {}]
                              - !Sub ["edgelambda.${AWS::URLSuffix}", {}]
                      Action:
                          - "sts:AssumeRole"
        Policies:
          -
            PolicyName: !Sub
                - "${prefix}-${env}-pixellog-lambda-policy"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Sid: !Sub
                            - "${prefix}${env}PixelLogLambdaPolicy"
                            - { env: !Ref Environment, prefix: !Ref Prefix }
                        Effect: "Allow"
                        Action:
                            - "s3:PutObject"
                            - "s3:GetObject"
                            - "cloudfront:*"
                            - "iam:CreateServiceLinkedRole"
                            - "xray:PutTelemetryRecords"
                            - "firehose:PutRecord"
                            - "logs:*"
                            - "lambda:*"
                            - "firehose:PutRecordBatch"
                            - "firehose:ListDeliveryStreams"
                            - "xray:PutTraceSegments"
                        Resource: "*"
    HPXSecureParamLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: HPXSecureParamLambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - ssm:PutParameter
                    - ssm:DeleteParameter
                    - kms:Encrypt
                  Resource: "*"
    HPXSecureParamLambda:
      Type: AWS::Lambda::Function
      Properties:
        Handler: index.handler
        Role:
        Runtime: nodejs8.10
        Code:
          ZipFile: >
            var response = require('cfn-response')
            var aws = require('aws-sdk')
            var ssm = new aws.SSM()

            exports.handler = async function(event, context, callback) {
                var [region, accountId, stackGuid] = event.StackID.split(":").slice(3,5)
                var stackName = stackGuid.split("/")[1]

                var params = Object.assign({ Name: "", Value: "", Type: "", KeyId: ""},event.ResourceProperties)
                params.Arn = `arn:aws:ssm:${region}:${accountId}:${props.Name}`
                var response = null

                if (event.RequestType == "Create") {
                  params.Overwite = false
                  response = await ssm.putParameter(params).promise()
                } elseif (event.RequestType == "Update") {
                  params.Overwrite = true
                  response = await ssm.putParameter(params).promise()
                } elseif (event.RequestType == "Delete")
                  response = await ssm.deleteParameter(params).promise()
                } else {
                  response = await ssm.getParameter(params).promise()
                }
                console.log(response)
                callback(null, response)
              }







    PixelLogLambda:
      Type: "AWS::Lambda::Function"
      Properties:
          Code:
              S3Bucket: !Ref DistS3Bucket
              S3Key: lambda/hpx-cloudfront-logs-production.zip
          Handler: "index.handler"
          Role: !GetAtt PixelLogLambdaRole.Arn
          Runtime: "nodejs8.10"
          Environment:
              Variables:
                  KINESIS_DELIVERY_STREAM: "TBD"

    PixelLogLambdaAlias:
        Type: "AWS::Lambda::Alias"
        Properties:
            Name: "PixelLogLambdaAlias"
            FunctionName: !Ref PixelLogLambda
            FunctionVersion: "$LATEST"

    PixelLogKinesisFirehose:
        Type: "AWS::KinesisFirehose::DeliveryStream"
        Properties:
            DeliveryStreamName: !Sub
                - "${prefix}-${env}-pixellog-delivery-stream"
                - { env: !Ref Environment, prefix: !Ref Prefix }
            RedshiftDestinationConfiguration:
                ClusterJDBCURL: TBD
                CopyCommand: TBD
                Username: !Ref RedShiftUser
                Password: !Ref RedShiftPassword
                RoleARN: TBD
                S3Configuration:
